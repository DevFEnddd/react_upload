{"ast":null,"code":"var _jsxFileName = \"F:\\\\PM\\\\oiron_v101\\\\oiron\\\\packages\\\\crypto-theme\\\\components\\\\Header\\\\SideNav\\\\SingleNavMobile.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { i18n, withTranslation } from \"../../../i18n\";\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport link from \"../../../public/text/link\";\nimport useStyles from '../sidenav-style';\nimport navMenu from '../data/single';\n\nfunction SingleNavMobile(props) {\n  const classes = useStyles();\n  const {\n    toggleDrawer,\n    open\n  } = props;\n  const {\n    t\n  } = props;\n  const {\n    0: curURL,\n    1: setCurURL\n  } = useState('');\n  const {\n    0: curOrigin,\n    1: setCurOrigin\n  } = useState('');\n  const {\n    0: langPath,\n    1: setLangPath\n  } = useState('');\n  useEffect(() => {\n    setCurURL(window.location.href);\n    setCurOrigin(window.location.origin);\n    setLangPath('/' + i18n.options.localeSubpaths[i18n.language]);\n  }, []);\n\n  const SideList = () => __jsx(\"div\", {\n    className: classes.mobileNav,\n    role: \"presentation\",\n    onClick: toggleDrawer,\n    onKeyDown: toggleDrawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: clsx(classes.menu, open && classes.menuOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(List, {\n    className: classes.sideSinglelv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, navMenu.map((item, index) => __jsx(ListItem, {\n    button: true,\n    component: \"a\",\n    href: `#${item}`,\n    key: item,\n    index: index.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, __jsx(ListItemText, {\n    primary: item,\n    className: classes.menuList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  })))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), __jsx(List, {\n    className: classes.userMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, ['login', 'register'].map((text, index) => __jsx(ListItem, {\n    key: index.toString(),\n    className: clsx(classes.noChild, curURL === curOrigin + langPath + '/' + text ? classes.current : ''),\n    component: \"a\",\n    href: link.crypto[text],\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, __jsx(ListItemText, {\n    className: classes.menuList,\n    primary: t('common:' + text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }))))));\n\n  return __jsx(SwipeableDrawer, {\n    open: open,\n    onClose: toggleDrawer,\n    onOpen: toggleDrawer,\n    classes: {\n      paper: classes.paperNav\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(SideList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}\n\nSingleNavMobile.propTypes = {\n  toggleDrawer: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  t: PropTypes.func.isRequired\n};\n\nSingleNavMobile.getInitialProps = async () => ({\n  namespacesRequired: ['common']\n});\n\nexport default withTranslation(['common'])(SingleNavMobile);","map":{"version":3,"sources":["F:/PM/oiron_v101/oiron/packages/crypto-theme/components/Header/SideNav/SingleNavMobile.js"],"names":["React","useState","useEffect","PropTypes","clsx","i18n","withTranslation","SwipeableDrawer","List","Divider","ListItem","ListItemText","link","useStyles","navMenu","SingleNavMobile","props","classes","toggleDrawer","open","t","curURL","setCurURL","curOrigin","setCurOrigin","langPath","setLangPath","window","location","href","origin","options","localeSubpaths","language","SideList","mobileNav","menu","menuOpen","sideSinglelv","map","item","index","toString","menuList","userMenu","text","noChild","current","crypto","paper","paperNav","propTypes","func","isRequired","bool","getInitialProps","namespacesRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { i18n, withTranslation } from '~/i18n';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport link from '~/public/text/link';\nimport useStyles from '../sidenav-style';\nimport navMenu from '../data/single';\n\nfunction SingleNavMobile(props) {\n  const classes = useStyles();\n  const { toggleDrawer, open } = props;\n  const { t } = props;\n\n  const [curURL, setCurURL] = useState('');\n  const [curOrigin, setCurOrigin] = useState('');\n  const [langPath, setLangPath] = useState('');\n\n  useEffect(() => {\n    setCurURL(window.location.href);\n    setCurOrigin(window.location.origin);\n    setLangPath('/' + i18n.options.localeSubpaths[i18n.language]);\n  }, []);\n\n  const SideList = () => (\n    <div\n      className={classes.mobileNav}\n      role=\"presentation\"\n      onClick={toggleDrawer}\n      onKeyDown={toggleDrawer}\n    >\n      <div className={clsx(classes.menu, open && classes.menuOpen)}>\n        <List className={classes.sideSinglelv}>\n          {navMenu.map((item, index) => (\n            <ListItem\n              button\n              component=\"a\"\n              href={`#${item}`}\n              key={item}\n              index={index.toString()}\n            >\n              <ListItemText primary={item} className={classes.menuList} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List className={classes.userMenu}>\n          {['login', 'register'].map((text, index) => (\n            <ListItem\n              key={index.toString()}\n              className={clsx(classes.noChild, curURL === curOrigin + langPath + '/' + text ? classes.current : '')}\n              component=\"a\"\n              href={link.crypto[text]}\n              button\n            >\n              <ListItemText className={classes.menuList} primary={t('common:' + text)} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    </div>\n  );\n\n  return (\n    <SwipeableDrawer\n      open={open}\n      onClose={toggleDrawer}\n      onOpen={toggleDrawer}\n      classes={{\n        paper: classes.paperNav\n      }}\n    >\n      <SideList />\n    </SwipeableDrawer>\n  );\n}\n\n\nSingleNavMobile.propTypes = {\n  toggleDrawer: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  t: PropTypes.func.isRequired\n};\n\nSingleNavMobile.getInitialProps = async () => ({\n  namespacesRequired: ['common'],\n});\n\nexport default withTranslation(['common'])(SingleNavMobile);\n"]},"metadata":{},"sourceType":"module"}