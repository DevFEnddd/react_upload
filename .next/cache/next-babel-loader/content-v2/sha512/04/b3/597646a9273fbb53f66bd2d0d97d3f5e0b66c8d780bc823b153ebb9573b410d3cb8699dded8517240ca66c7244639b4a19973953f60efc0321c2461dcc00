{"ast":null,"code":"import _regeneratorRuntime from \"F:/PM/oiron_v101/oiron/packages/crypto-theme/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"F:/PM/oiron_v101/oiron/packages/crypto-theme/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"F:/PM/oiron_v101/oiron/packages/crypto-theme/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"F:\\\\PM\\\\oiron_v101\\\\oiron\\\\packages\\\\crypto-theme\\\\components\\\\Header\\\\TopNav\\\\SingleNav.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport Scrollspy from 'react-scrollspy';\nimport { withTranslation } from \"../../../i18n\";\nimport useStyles from '../header-style';\nimport navMenu from '../data/single';\nvar LinkBtn = /*#__PURE__*/React.forwardRef(_c = function LinkBtn(props, ref) {\n  // eslint-disable-line\n  return __jsx(AnchorLink, _extends({\n    to: props.to\n  }, props, {\n    innerRef: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }\n  })); // eslint-disable-line\n});\n_c2 = LinkBtn;\n\nfunction MixedNav(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n  var menuPrimary = props.menuPrimary,\n      singleNav = props.singleNav,\n      t = props.t;\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(Scrollspy, {\n    items: navMenu,\n    currentClassName: \"active\",\n    className: classes.scrollActiveNav,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, menuPrimary.map(function (item) {\n    return __jsx(\"li\", {\n      key: item.id.toString(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, singleNav ? __jsx(Button, {\n      component: AnchorLink,\n      href: item.url,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }\n    }, t('crypto-landing:header_' + item.name)) : __jsx(Button, {\n      href: '/' + item.url,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }, t('crypto-landing:header_' + item.name)));\n  }), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    href: \"#!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, t('common:header_sample_page')))));\n}\n\n_s(MixedNav, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = MixedNav;\nMixedNav.propTypes = {\n  menuPrimary: PropTypes.array.isRequired,\n  singleNav: PropTypes.bool,\n  t: PropTypes.func.isRequired\n};\nMixedNav.defaultProps = {\n  singleNav: false\n};\nMixedNav.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            namespacesRequired: ['common', 'crypto-landing']\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default withTranslation(['common', 'crypto-landing'])(MixedNav);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LinkBtn$React.forwardRef\");\n$RefreshReg$(_c2, \"LinkBtn\");\n$RefreshReg$(_c3, \"MixedNav\");","map":{"version":3,"sources":["F:/PM/oiron_v101/oiron/packages/crypto-theme/components/Header/TopNav/SingleNav.js"],"names":["React","Fragment","PropTypes","Button","AnchorLink","Scrollspy","withTranslation","useStyles","navMenu","LinkBtn","forwardRef","props","ref","to","MixedNav","classes","menuPrimary","singleNav","t","scrollActiveNav","map","item","id","toString","url","name","propTypes","array","isRequired","bool","func","defaultProps","getInitialProps","namespacesRequired"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport Scrollspy from 'react-scrollspy';\nimport { withTranslation } from '~/i18n';\nimport useStyles from '../header-style';\nimport navMenu from '../data/single';\n\nconst LinkBtn = React.forwardRef(function LinkBtn(props, ref) { // eslint-disable-line\n  return <AnchorLink to={props.to} {...props} innerRef={ref} />; // eslint-disable-line\n});\n\nfunction MixedNav(props) {\n  const classes = useStyles();\n  const {\n    menuPrimary,\n    singleNav,\n    t\n  } = props;\n\n  return (\n    <Fragment>\n      <Scrollspy\n        items={navMenu}\n        currentClassName=\"active\"\n        className={classes.scrollActiveNav}\n      >\n        {menuPrimary.map(item => (\n          <li key={item.id.toString()}>\n            {singleNav ? (\n              <Button component={AnchorLink} href={item.url}>\n                {t('crypto-landing:header_' + item.name)}\n              </Button>\n            ) : (\n              <Button href={'/' + item.url}>\n                {t('crypto-landing:header_' + item.name)}\n              </Button>\n            )}\n          </li>\n        ))}\n        <li>\n          <Button href=\"#!\">\n            {t('common:header_sample_page')}\n          </Button>\n        </li>\n      </Scrollspy>\n    </Fragment>\n  );\n}\n\nMixedNav.propTypes = {\n  menuPrimary: PropTypes.array.isRequired,\n  singleNav: PropTypes.bool,\n  t: PropTypes.func.isRequired\n};\n\nMixedNav.defaultProps = {\n  singleNav: false\n};\n\nMixedNav.getInitialProps = async () => ({\n  namespacesRequired: ['common', 'crypto-landing'],\n});\n\nexport default withTranslation(['common', 'crypto-landing'])(MixedNav);\n"]},"metadata":{},"sourceType":"module"}