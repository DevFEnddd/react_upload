{"ast":null,"code":"import _regeneratorRuntime from \"F:/PM/oiron_v101/oiron/packages/crypto-theme/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"F:/PM/oiron_v101/oiron/packages/crypto-theme/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"F:\\\\PM\\\\oiron_v101\\\\oiron\\\\packages\\\\crypto-theme\\\\components\\\\Header\\\\SideNav\\\\SingleNavMobile.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { i18n, withTranslation } from \"../../../i18n\";\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport link from \"../../../public/text/link\";\nimport useStyles from '../sidenav-style';\nimport navMenu from '../data/single';\n\nfunction SingleNavMobile(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n  var toggleDrawer = props.toggleDrawer,\n      open = props.open;\n  var t = props.t;\n\n  var _useState = useState(''),\n      curURL = _useState[0],\n      setCurURL = _useState[1];\n\n  var _useState2 = useState(''),\n      curOrigin = _useState2[0],\n      setCurOrigin = _useState2[1];\n\n  var _useState3 = useState(''),\n      langPath = _useState3[0],\n      setLangPath = _useState3[1];\n\n  useEffect(function () {\n    setCurURL(window.location.href);\n    setCurOrigin(window.location.origin);\n    setLangPath('/' + i18n.options.localeSubpaths[i18n.language]);\n  }, []);\n\n  var SideList = function SideList() {\n    return __jsx(\"div\", {\n      className: classes.mobileNav,\n      role: \"presentation\",\n      onClick: toggleDrawer,\n      onKeyDown: toggleDrawer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }, __jsx(\"div\", {\n      className: clsx(classes.menu, open && classes.menuOpen),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, __jsx(List, {\n      className: classes.sideSinglelv,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, navMenu.map(function (item, index) {\n      return __jsx(ListItem, {\n        button: true,\n        component: \"a\",\n        href: \"#\".concat(item),\n        key: item,\n        index: index.toString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, __jsx(ListItemText, {\n        primary: item,\n        className: classes.menuList,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }\n      }));\n    })), __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), __jsx(List, {\n      className: classes.userMenu,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, ['login', 'register'].map(function (text, index) {\n      return __jsx(ListItem, {\n        key: index.toString(),\n        className: clsx(classes.noChild, curURL === curOrigin + langPath + '/' + text ? classes.current : ''),\n        component: \"a\",\n        href: link.crypto[text],\n        button: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }, __jsx(ListItemText, {\n        className: classes.menuList,\n        primary: t('common:' + text),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }\n      }));\n    }))));\n  };\n\n  return __jsx(SwipeableDrawer, {\n    open: open,\n    onClose: toggleDrawer,\n    onOpen: toggleDrawer,\n    classes: {\n      paper: classes.paperNav\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(SideList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(SingleNavMobile, \"ftb+bqgNzY6nyLYTExvuzRHwJSU=\", false, function () {\n  return [useStyles];\n});\n\n_c = SingleNavMobile;\nSingleNavMobile.propTypes = {\n  toggleDrawer: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  t: PropTypes.func.isRequired\n};\nSingleNavMobile.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            namespacesRequired: ['common']\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default withTranslation(['common'])(SingleNavMobile);\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleNavMobile\");","map":{"version":3,"sources":["F:/PM/oiron_v101/oiron/packages/crypto-theme/components/Header/SideNav/SingleNavMobile.js"],"names":["React","useState","useEffect","PropTypes","clsx","i18n","withTranslation","SwipeableDrawer","List","Divider","ListItem","ListItemText","link","useStyles","navMenu","SingleNavMobile","props","classes","toggleDrawer","open","t","curURL","setCurURL","curOrigin","setCurOrigin","langPath","setLangPath","window","location","href","origin","options","localeSubpaths","language","SideList","mobileNav","menu","menuOpen","sideSinglelv","map","item","index","toString","menuList","userMenu","text","noChild","current","crypto","paper","paperNav","propTypes","func","isRequired","bool","getInitialProps","namespacesRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { i18n, withTranslation } from '~/i18n';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport link from '~/public/text/link';\nimport useStyles from '../sidenav-style';\nimport navMenu from '../data/single';\n\nfunction SingleNavMobile(props) {\n  const classes = useStyles();\n  const { toggleDrawer, open } = props;\n  const { t } = props;\n\n  const [curURL, setCurURL] = useState('');\n  const [curOrigin, setCurOrigin] = useState('');\n  const [langPath, setLangPath] = useState('');\n\n  useEffect(() => {\n    setCurURL(window.location.href);\n    setCurOrigin(window.location.origin);\n    setLangPath('/' + i18n.options.localeSubpaths[i18n.language]);\n  }, []);\n\n  const SideList = () => (\n    <div\n      className={classes.mobileNav}\n      role=\"presentation\"\n      onClick={toggleDrawer}\n      onKeyDown={toggleDrawer}\n    >\n      <div className={clsx(classes.menu, open && classes.menuOpen)}>\n        <List className={classes.sideSinglelv}>\n          {navMenu.map((item, index) => (\n            <ListItem\n              button\n              component=\"a\"\n              href={`#${item}`}\n              key={item}\n              index={index.toString()}\n            >\n              <ListItemText primary={item} className={classes.menuList} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List className={classes.userMenu}>\n          {['login', 'register'].map((text, index) => (\n            <ListItem\n              key={index.toString()}\n              className={clsx(classes.noChild, curURL === curOrigin + langPath + '/' + text ? classes.current : '')}\n              component=\"a\"\n              href={link.crypto[text]}\n              button\n            >\n              <ListItemText className={classes.menuList} primary={t('common:' + text)} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    </div>\n  );\n\n  return (\n    <SwipeableDrawer\n      open={open}\n      onClose={toggleDrawer}\n      onOpen={toggleDrawer}\n      classes={{\n        paper: classes.paperNav\n      }}\n    >\n      <SideList />\n    </SwipeableDrawer>\n  );\n}\n\n\nSingleNavMobile.propTypes = {\n  toggleDrawer: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  t: PropTypes.func.isRequired\n};\n\nSingleNavMobile.getInitialProps = async () => ({\n  namespacesRequired: ['common'],\n});\n\nexport default withTranslation(['common'])(SingleNavMobile);\n"]},"metadata":{},"sourceType":"module"}