{"ast":null,"code":"var _jsxFileName = \"F:\\\\PM\\\\oiron_v101\\\\oiron\\\\packages\\\\crypto-theme\\\\components\\\\Header\\\\TopNav\\\\MegaMenu.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { i18n } from \"../../../i18n\";\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Fade from '@material-ui/core/Fade';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Icon from '@material-ui/core/Icon';\nimport useStyles from '../header-style';\n\nfunction MegaMenu(props) {\n  const {\n    dataMenu,\n    open,\n    toggle\n  } = props;\n  const classes = useStyles();\n  const anchorRef = useRef(null);\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const {\n    0: curURL,\n    1: setCurURL\n  } = useState('');\n  const {\n    0: curOrigin,\n    1: setCurOrigin\n  } = useState('');\n  const {\n    0: langPath,\n    1: setLangPath\n  } = useState('');\n\n  const handleToggle = (id, event) => {\n    setAnchorEl(event.currentTarget);\n    toggle(id);\n  };\n\n  useEffect(() => {\n    setCurURL(window.location.href);\n    setCurOrigin(window.location.origin);\n    setLangPath('/' + i18n.options.localeSubpaths[i18n.language]);\n  }, []);\n  return __jsx(\"ul\", {\n    className: classes.multiMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, dataMenu.map((item, index) => __jsx(\"li\", {\n    key: index.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    onClick: e => handleToggle(item.id, e),\n    ref: anchorRef,\n    endIcon: __jsx(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 24\n      }\n    }, \"expand_more\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, item.name), __jsx(Popper, {\n    open: open[item.id] || false,\n    anchorEl: anchorEl,\n    disablePortal: false,\n    role: undefined,\n    transition: true,\n    className: classes.megaMenuRoot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, ({\n    TransitionProps,\n    placement\n  }) => __jsx(Fade, _extends({}, TransitionProps, {\n    style: {\n      width: '100%',\n      transformOrigin: placement === 'bottom' ? 'left top' : 'left bottom'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), __jsx(Paper, {\n    className: classes.megaMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, __jsx(Container, {\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }\n  }, item.child.map((subitem, childIndex) => __jsx(Grid, {\n    item: true,\n    sm: 3,\n    key: childIndex.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 27\n    }\n  }, __jsx(ListSubheader, {\n    disableSticky: true,\n    component: \"div\",\n    classes: {\n      root: classes.titleMega\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, subitem.name), __jsx(\"img\", {\n    src: subitem.thumb,\n    alt: \"thumbnail\",\n    className: classes.thumbMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }), __jsx(List, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, subitem.child.map((granditem, grandChildIndex) => __jsx(ListItem, {\n    key: grandChildIndex.toString(),\n    button: true,\n    className: classes.menuItem,\n    component: \"a\",\n    href: granditem.link,\n    selected: curURL === curOrigin + langPath + granditem.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }\n  }, __jsx(ListItemText, {\n    primary: granditem.name,\n    classes: {\n      primary: classes.menuList\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 35\n    }\n  })))))))))))))));\n}\n\nMegaMenu.propTypes = {\n  dataMenu: PropTypes.array.isRequired,\n  toggle: PropTypes.func.isRequired,\n  open: PropTypes.object.isRequired\n};\nexport default MegaMenu;","map":{"version":3,"sources":["F:/PM/oiron_v101/oiron/packages/crypto-theme/components/Header/TopNav/MegaMenu.js"],"names":["React","useState","useRef","useEffect","PropTypes","i18n","Container","Button","Grid","Fade","Paper","Popper","List","ListItem","ListItemText","ListSubheader","Icon","useStyles","MegaMenu","props","dataMenu","open","toggle","classes","anchorRef","anchorEl","setAnchorEl","curURL","setCurURL","curOrigin","setCurOrigin","langPath","setLangPath","handleToggle","id","event","currentTarget","window","location","href","origin","options","localeSubpaths","language","multiMenu","map","item","index","toString","e","name","undefined","megaMenuRoot","TransitionProps","placement","width","transformOrigin","megaMenu","child","subitem","childIndex","root","titleMega","thumb","thumbMenu","granditem","grandChildIndex","menuItem","link","primary","menuList","propTypes","array","isRequired","func","object"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useEffect\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { i18n } from '~/i18n';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Fade from '@material-ui/core/Fade';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Icon from '@material-ui/core/Icon';\nimport useStyles from '../header-style';\n\nfunction MegaMenu(props) {\n  const {\n    dataMenu,\n    open,\n    toggle\n  } = props;\n  const classes = useStyles();\n\n  const anchorRef = useRef(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const [curURL, setCurURL] = useState('');\n  const [curOrigin, setCurOrigin] = useState('');\n  const [langPath, setLangPath] = useState('');\n\n  const handleToggle = (id, event) => {\n    setAnchorEl(event.currentTarget);\n    toggle(id);\n  };\n\n  useEffect(() => {\n    setCurURL(window.location.href);\n    setCurOrigin(window.location.origin);\n    setLangPath('/' + i18n.options.localeSubpaths[i18n.language]);\n  }, []);\n\n  return (\n    <ul className={classes.multiMenu}>\n      {dataMenu.map((item, index) => (\n        <li key={index.toString()}>\n          <div>\n            <Button\n              onClick={(e) => handleToggle(item.id, e)}\n              ref={anchorRef}\n              endIcon={<Icon>expand_more</Icon>}\n            >\n              {item.name}\n            </Button>\n            <Popper\n              open={open[item.id] || false}\n              anchorEl={anchorEl}\n              disablePortal={false}\n              role={undefined}\n              transition\n              className={classes.megaMenuRoot}\n            >\n              {({ TransitionProps, placement }) => (\n                <Fade\n                  {...TransitionProps}\n                  style={{ width: '100%', transformOrigin: placement === 'bottom' ? 'left top' : 'left bottom' }}\n                >\n                  <Paper className={classes.megaMenu}>\n                    <Container maxWidth=\"md\">\n                      <Grid container spacing={1}>\n                        {item.child.map((subitem, childIndex) => (\n                          <Grid item sm={3} key={childIndex.toString()}>\n                            <ListSubheader\n                              disableSticky\n                              component=\"div\"\n                              classes={{\n                                root: classes.titleMega\n                              }}\n                            >\n                              {subitem.name}\n                            </ListSubheader>\n                            <img src={subitem.thumb} alt=\"thumbnail\" className={classes.thumbMenu} />\n                            <List component=\"div\">\n                              {subitem.child.map((granditem, grandChildIndex) => (\n                                <ListItem\n                                  key={grandChildIndex.toString()}\n                                  button\n                                  className={classes.menuItem}\n                                  component=\"a\"\n                                  href={granditem.link}\n                                  selected={curURL === (curOrigin + langPath + granditem.link)}\n                                >\n                                  <ListItemText\n                                    primary={granditem.name}\n                                    classes={{\n                                      primary: classes.menuList\n                                    }}\n                                  />\n                                </ListItem>\n                              ))}\n                            </List>\n                          </Grid>\n                        ))}\n                      </Grid>\n                    </Container>\n                  </Paper>\n                </Fade>\n              )}\n            </Popper>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nMegaMenu.propTypes = {\n  dataMenu: PropTypes.array.isRequired,\n  toggle: PropTypes.func.isRequired,\n  open: PropTypes.object.isRequired\n};\n\nexport default MegaMenu;\n"]},"metadata":{},"sourceType":"module"}